///////////////////////////////////////////////////////////////////////////////
//                                    HEADER
///////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////
// LOGO
.logo {
  height: 3.5rem;
  margin-left: 2rem;
}

//////////////////////////////////////////
// SEARCH
.search {
  flex: 0 0 40%; // don't grow, don't shrink, occupy 40% of the header

  display: flex; // Nested flexbox: search flex item is becoming also a flex container
  justify-content: center;  // align flex items in the main axis
  align-items: center;      // align flex items in the cross axis

  @media only screen and (max-width: $bp-smallest) { 
    order: 1; // move the search box to be the last flex item in the flex container 
    flex: 0 0 100%; // don't grow, don't shrink, occupy 100% of the header
  } 

  &__input {
    font-family: inherit; // <input> doesn't inherit the font-family of global document
    font-size: inherit;
    color: inherit;
    background-color: var(--color-grey-light-2);
    border: none;
    padding: .7rem 2rem;
    border-radius: 100px; // a high number for the rounded edges
    width: 90%;           // 90% of parent element (search)
    transition: all .2s;
    margin-right: -3.2rem; // for the button to move on top of the input

    @media only screen and (max-width: $bp-smallest) {
      margin-right: 0;
    }

    &:focus {
      width: 100%;         // make input bigger when on focus
      outline: none;       // remove the focus style
      background-color: var(--color-grey-light-3); // darker
    }

    &::-webkit-input-placeholder { 
      font-weight: 100;
      color: var(--color-grey-light-4);
    }
  }

  &__button {
    border: none;
    background-color: transparent; 

    &:focus {
      outline: none;  
    }

    &:active {
      transform: translateY(2px); // move button down when we click on it
    }
  }

  // NOT needed thanks to 'background-color: transparent' for the button  
  // &__input:focus + &__button {  // select adjacent sibling when the input is focused
  //   background-color: var(--color-grey-light-3);
  // }
  
  &__icon {
    height: 2rem;
    width: 2rem;
    fill: var(--color-grey-dark-3);

    @media only screen and (max-width: $bp-smallest) {
      margin-left: -4rem;
    }
  }
}


//////////////////////////////////////////
// USER NAVIGATION
.user-nav {
  align-self: stretch; // override the align-items: center (of the header)

  display: flex; // Nested flexbox (2nd level): user-nav flex item also a flex container 
  align-items: center; // align user-nav flex items in the cross axis

  position: relative;  // for CHALLENGE 1

  // target all the 'user.nav' direct children (icon-box, icon-box, user)
  & > * {
    padding: 0 2rem;
    cursor: pointer;
    height: 100%;  // make the hover go all the way from the top to the bottom

    display: flex; // Nested flexbox (3rd level): icon-box + user flex items also flex containers
    align-items: center; // align icon-box + user flex items in the cross axis
  }

  & > *:hover {
    background-color: var(--color-grey-light-2);
  }

  &__icon-box {
    position: relative;
  }

  &__icon {
    height: 2.25rem;
    width: 2.25rem;
    fill: var(--color-grey-dark-2); // change color of svg icon
  }

  &__notification {
    font-size: .8rem;
    height: 1.75rem;
    width: 1.75rem;
    border-radius: 50%;
    background-color: var(--color-primary);
    color: #fff;
    position: absolute; // to position 'notification' exactly where we want it
      top: 1.5rem;
      right: 1.1rem;

    display: flex; // Nested flexbox (4th level): notification flex item also a flex container
    justify-content: center; // center notification flex items on the main axis
    align-items: center;     // center notificationflex items on the cross axis
  }

  &__user {
    width: 100%;
  }

  &__user-photo {
    height: 3.75rem;
    border-radius: 50%;
    margin-right: 1rem;
  }

  // CHALLENGE 1 --------------------------------------------------
  &__dropdown {
    //display: none;             // by default make dropdown invisible
    opacity: 0;
    visibility: hidden;
    display: flex;              
    flex-direction: column;     // flex items (list elements) placed from top to bottom

    position: absolute;
      top: 100%;                // to not cover the username element
      right: 0;
    //width: 20rem;
    z-index: 20;                // when displayed be on top of other components
    background-color: var(--color-grey-dark-1);
    color: white;

    // for smallest screens
    @media only screen and (max-width: $bp-smallest) { 
      width: 100vw;              // dropdown menu to occupy all viewport width
      align-items: flex-end;     // for the animation effect to begin from the edge
    } 
  }

  &__user:hover &__dropdown {
    //display: block;             // make dropdown visible when we hover the user
    opacity: 1;
    visibility: visible;
  }
    
  // <ul> 
  &__dropdown-list {
    list-style: none;
  }
    
  // <li>
  &__dropdown-item {
    padding: 1.4rem 2rem;
    cursor: pointer;
    position: relative;
  
    &:hover .user-nav__dropdown-icon { // on hover change the icon color
      fill: var(--color-primary-light-3);
      transform: scale(1.2); 
    }

    // for smallest screens
    @media only screen and (max-width: $bp-smallest) { 
      padding-right: 35vw;          // place the dropdown items near the center
    }
  }

  // Place elements before each dropdown item for the animation hover effect
  &__dropdown-item::before { 
    content: '';                // always define content for a pseudo-element
    background-color: var(--color-primary-light);
    position: absolute;
      top: 0;
      right: 0;
    height: 100%;               // we want the same height as the dropdown item
    width: 3px;

    transform: scaleY(0);       // in the normal state (without any hover)
    transform-origin: center;   // default value
    transition: transform .2s,  // animates 3 properties
                width .4s cubic-bezier(1, 0, 0 , 1) .2s,
                background-color .1s;
  }

  &__dropdown-item:hover::before {
    transform: scaleY(1);        // scales in the Y axis 
    width: 100%;                 // to expand it in the X axis

    // for smallest screens
    @media only screen and (max-width: $bp-smallest) { 
      width: 100vw; 
    } 
  }

  &__dropdown-item:active::before { // when we click it, set the color a bit brighter
    background-color: var(--color-primary-light-2);
  }

  // <a>
  &__dropdown-link:link,
  &__dropdown-link:visited {
    color: var(--color-grey-light-1);
    text-decoration: none;

    display: flex;
    align-items: center; // center its flex items in the cross axis (vertical)

    z-index: 10;         // links to be on top of the ::before pseudo element
    position: relative;  // z-index only works if we specify a position 
  }

  // <svg>
  &__dropdown-icon {
    height: 2rem;
    width: 2rem;
    margin-right: 2rem;
    fill: currentColor;        // change color of svg icon
    transition: transform .3s; // for the transform: scale(1.2);
  }
}


///////////////////////////////////////////////////////////////////////////////
//                              CONTENT - SIDEBAR
///////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////
// SIDE-NAV
.side-nav {
  font-size: 1.4rem;
  list-style: none; 
  margin-top: 3.5rem;

  // for medium screens place the sidebar items side by side
  @media only screen and (max-width: $bp-medium) { 
    display: flex;
    margin: 0; 
  } 

  // ITEM (<li>)
  &__item {
    position: relative;

    &:not(:last-child) {
      margin-bottom: .5rem;

      @media only screen and (max-width: $bp-medium) { 
        margin-bottom: 0; // medium screens remove margin-bottom in sidebar items
      } 
    }

    @media only screen and (max-width: $bp-medium) { 
      flex: 1; // sidebar items to grow as much as they can (occupy same space)
    } 
  }

  &__item::before { // Place elements before each list item for the hover effect
    content: '';    // always define content for a pseudo-element
    background-color: var(--color-primary);
    position: absolute;
      top: 0;
      left: 0;
    height: 100%;   // we want the same height as the list item

    width: 3px;
    transform: scaleY(0);       // in the normal state (without any hover)
    transform-origin: center;   // default value
    transition: transform .2s,  // animates 3 properties
                width .4s cubic-bezier(1, 0, 0 , 1) .2s,
                background-color .1s;
  }

  &__item:hover::before,
  &__item--active::before {
    transform: scaleY(1); // scales in the Y axis 
    width: 100%;          // to expand it in the X axis
  }

  &__item:active::before { // when we click it, set the color a bit brighter
    background-color: var(--color-primary-light);
  }


  // LINK (<a>)
  &__link:link,
  &__link:visited {
    color: var(--color-grey-light-1);
    text-decoration: none;
    text-transform: uppercase;
    padding: 1.5rem 3rem;

    //display: block;
    display: flex;
    align-items: center; // center its flex items in the cross axis

    z-index: 10;         // links on top of the ::before pseudo element
    position: relative;  // z-index only works if we specify a position 

    @media only screen and (max-width: $bp-medium) { 
      justify-content: center; // medium screens center content inside each sidebar item
      padding: 2rem;
    } 

    @media only screen and (max-width: $bp-small) { 
      flex-direction: column; // small screens place the icon above the navigation text
      padding: 1.5rem .5rem;
    } 
  }

  &__icon {
    height: 2rem;
    width: 2rem;
    margin-right: 2rem;
    fill: currentColor; // change color of svg icon

    @media only screen and (max-width: $bp-small) { 
      margin-right: 0;  // to center the icon
      margin-bottom: .5rem;
      height: 1.7rem;
      width: 1.7rem;
    } 
  }

  & span {
    @media only screen and (max-width: $bp-xsmallest) { 
      display: none; // hide the navigation text for xsmallest screens
    } 
  }
}

//////////////////////////////////////////
// LEGAL
.legal {
  font-size: 1.2rem;
  color: var(--color-grey-light-4);
  text-align: center;
  padding: 2.5rem;

  // for medium screens get rid of the legal message in the sidebar
  @media only screen and (max-width: $bp-medium) { 
    display: none; 
  } 
}

///////////////////////////////////////////////////////////////////////////////
//                              CONTENT - HOTEL VIEW
///////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////
// GALLERY
.gallery {

  display: flex;  // Make gallery a Flebox container (flex items will be side by side)

  &__photo {
    width: 100%;    // For responsive web design, images always need width or height in %
    display: block; // An image should be block/inline-block if we don't want space underneath
  }
}

//////////////////////////////////////////
// HOTEL OVERVIEW
.overview {

  display: flex; // make the 'overview' a Flexbox container
  align-items: center; // align the flexbox items along the cross axis
  border-bottom: var(--line);

  @media only screen and (max-width: $bp-xsmallest) { 
    flex-wrap: wrap;
    align-content: center;    // alignment between the content in several rows
    justify-content: space-between;
    height: 12rem;
  } 

  &__heading {
    font-size: 2.3rem; 
    font-weight: 400;  // big text but small font-weight
    text-transform: uppercase;
    letter-spacing: 1px;
    padding: 1.5rem 3rem;

    @media only screen and (max-width: $bp-small) { 
      font-size: 1.8rem; 
      padding: 1.2rem 2rem;
    } 

    @media only screen and (max-width: $bp-smallest) { 
      font-size: 1.6rem; 
      padding: .9rem 1rem;
    } 

    @media only screen and (max-width: $bp-xsmallest) { 
      font-size: 1.5rem; 
      padding: .9rem .5rem;
      margin-left: 1rem;
    } 
  }

  &__stars {
    //flex: 1;          // stars occupy all available space (not a good solution)
    margin-right: auto; // stars occupy only needed space. Rest of space is margin
    
    //line-height: 0;   // an option to remove the small space below each of the stars
    //font-size: 0;
    display: flex;      // another option to remove the small space below each of the stars 
    
    @media only screen and (max-width: $bp-xsmallest) { 
     order: 1;          // make it the last flex item for xsmallest screens
     margin-left: 2rem;
     flex: 0 0 100%;    // 100% to force to break into a new row for xsmallest breakpoint
    } 
  }

  &__icon-star, 
  &__icon-location {
    width: 1.8rem;
    height: 1.8rem;
    fill: var(--color-primary);
  }

  &__icon-location {
    margin-right: .5rem;
  }

  &__location {
    font-size: 1.2rem;   // this is what will be inherited by 'btn-inline'
    display: flex;       
    align-items: center; // align on cross axix the flex items of 'location'
  }

  &__rating {
    background-color: var(--color-primary);
    color: #fff;
    margin-left: 3rem;
    padding: 0 2.3rem;
    align-self: stretch; // override for this single element the 'overview' align-item: center

    display: flex;
    flex-direction: column;  
    justify-content: center; // centers on the main axis (in this case it is the Y axis)
    align-items: center;     // centers on the cross axis (in this case it is the X axis)

    @media only screen and (max-width: $bp-small) { 
      padding: 0 1.5rem;
    } 
  }

  &__rating-average {
    font-size: 2.25rem;
    font-weight: 300;
    margin-bottom: -3px;    // to decrease the spacing between the 2 ratings.

    @media only screen and (max-width: $bp-small) { 
      font-size: 1,8rem;
    }
  }

  &__rating-count {
    font-size: .9rem;
    text-transform: uppercase;

    @media only screen and (max-width: $bp-small) { 
      font-size: .8rem;
    }
  }
}

//////////////////////////////////////////
// BUTTON INLINE
.btn-inline {
  border: none;
  background-color: transparent;
  font-size: inherit;
  color: var(--color-primary);
  border-bottom: 1px solid currentColor; // border with exact same color as the text
  padding-bottom: 2px;
  display: inline-block; // to be able to set the top or bottom padding, height, width 
  cursor: pointer;

  //-webkit-backface-visibility: hidden;  // NOT works! Added to stop amimation flickering
  //-moz-backface-visibility: hidden;
  //backface-visibility: hidden;          
  //-webkit-transform:translate3d(0,0,0); // NOT works! Added to stop amimation flickering
  //transform: translate3d(0,0,0);
  transition: all .2s;

  & span {
    margin-left: 3px;
    transition: margin-left .2s;
  }

  &:hover {
    color: var(--color-grey-dark-1);

    span {
      margin-left: 8px;
    }
  }

  &:focus {
    outline: none; 
    animation: pulsate 1s infinite;
  }
}

@keyframes pulsate {
  0% { // initial state
    transform: scale(1);
    box-shadow: none;
    opacity: 1;
    //transform-origin: 0 0;
    //filter: none;
  }

  50% {
    transform: scale(1);
    opacity: .8;
    box-shadow: 0 1rem 4rem rbga(0, 0, 0, .25); //x y blur color with opacity
    //transform-origin: 0 0;
  }

  100% { // back to the initial state 
    transform: scale(1);
    box-shadow: none;
    opacity: 1;
    //transform-origin: 0 0;
    //filter: none;
  }
}


//////////////////////////////////////////
// PARAGRAPH
.paragraph {

  &:not(:last-of-type){
    margin-bottom: 2rem;
  }
}


//////////////////////////////////////////
// LIST <ul>
.list { 
  list-style: none;
  margin: 3rem 0;
  padding: 3rem 0;
  border-top: var(--line);
  border-bottom: var(--line);

  display: flex;   // Flex Container (by default 'flex-wrap: nowrap')
  flex-wrap: wrap; // if not enough space -> allow the list elements to wrap into new lines

  // <li>
  &__item {
    flex: 0 0 50%; // width 50% because we want to have 2 elements side-by-side
    margin-bottom: .8rem;

    @media only screen and (max-width: $bp-xsmallest) { 
      flex: 0 0 100%; // don't grow, don't shrink, occupy 100% of the list
    } 
  }

  &__item::before {
    content: '';    // always define content for a pseudo-element
    display: inline-block;
    height: 1.2rem;
    width: 1.2rem;
    margin-right: .8rem;

    // Include an SVG icon in our CSS without using any HTML
    // Older browsers
    background-image: url(../img/chevron-thin-right.svg);
    background-size: cover; // avoid icon repeating

    // Newer browsers- use masks
    @supports (-webkit-mask-image: url()) or (mask-image: url()) {
      background-color: var(--color-primary);
      -webkit-mask-image: url(../img/chevron-thin-right.svg);
      -webkit-mask-size: cover;
      mask-image: url(../img/chevron-thin-right.svg);
      mask-size: cover;
      background-image: none;
    }
  }
}


//////////////////////////////////////////
// RECOMMEND
.recommend {
  font-size: 1.3rem;
  color: var(--color-grey-dark-3);

  display: flex;
  //justify-content: space-between;
  align-items: center;

  &__count {
    margin-right: auto;
  }

  &__friends {
    display: flex;
  }

  &__photo {
    height: 3.5rem;
    width: 3.5rem;
    border-radius: 50%;       // round the image
    border: 3px solid #fff; 
    box-sizing: content-box;  // to avoid the border shrinking the image

    &:not(:last-child) {
      margin-right: -1.5rem;  // place images artially on top of each other 
    }
  }
}

//////////////////////////////////////////
// REVIEWS
.review {
  background-color: #fff;
  box-shadow: var(--shadow-light);
  padding: 3rem;
  margin-bottom: 3.5rem;
  position: relative;
  overflow: hidden;     // avoid the quotation mark overflowing the review white box
  width: 100%;          // fix to make all reviews occupy same width independent of content size

  @media only screen and (max-width: $bp-medium) { 
    padding: 2rem; // for medium screens reduce the padding
    margin-bottom: 3rem;
  } 

  &__text {
    margin-bottom: 2rem;

    z-index: 10;         // avoid the quotation mark on top of the review text
      position: relative;// z-index only works if we set the position    
  }

  &__user {
    display: flex;       // the flex container (by default flex-direction: row)
    align-items: center; // align flex items in the cross axis (here is vertically)
  }

  &__photo {
    height: 4.5rem;
    width: 4.5rem;
    border-radius: 50%;
    margin-right: 1.5rem;
  }

  &__user-box {
    margin-right: auto;  // to push the 'rating' all the way to the right side.
  }

  &__user-name {
    font-size: 1.5rem;
    font-weight: 600;    // make it bold
    text-transform: uppercase;
    margin-bottom: .4rem;
  }

  &__user-date {
    font-size: 1.2rem;
    color: var(--color-grey-dark-3); 
  }

  &__rating {
    font-size: 2.2rem;
    font-weight: 300;  // to compensate for the bigger font-size
    color: var(--color-primary);

  }

  // Quotation mark
  &::before {
    content: '\201C';   // symbol for the double quotation mark
    position: absolute; // relative to the parent ('review')
      top: -2.5rem;
      left: -1rem;
    font-size: 20rem;
    font-family: sans-serif;
    line-height: 1;     // avoid the quotation mark to occupy huge space
    color: var(--color-grey-light-2);
    //z-index: 1;
  }
}


//////////////////////////////////////////
// CALL TO ACTION
.cta {
  padding: 3.5rem 0;
  text-align: center;

  @media only screen and (max-width: $bp-medium) { 
    padding: 2.5rem 0; // for medium screens reduce the padding
  } 

  &__book-now {
    font-size: 2rem;
    font-weight: 300;
    margin-bottom: 3.5rem;
    text-transform: uppercase;
  }
}

//////////////////////////////////////////
// BUTTON 
.btn {
  font-size: 1.5rem;
  font-weight: 300;
  text-transform: uppercase;
  border-radius: 100px;  // button rounded at the sides
  border: none;
  background-image: linear-gradient(to right, var(--color-primary-light), var(--color-primary-dark));
  color: #fff;
  cursor: pointer;
  overflow: hidden;      // hides the overflowed text
  position: relative;

  // NOTE: We can refactor the repeated code in &__visible and &__invisible
  // & > * {  // select all btn children
  //   display: inline-block; 
  //   height: 100%;          
  //   width: 100%;
  //   transition: all .2s;
  // }
  
  &__visible {
    display: inline-block; // to be able to give it padding (by default is inline)
    height: 100%;          // so that it has the same height of the parent element (btn)
    width: 100%;
    padding: 2rem 7.5rem;
    transition: all .2s;
  }

  &__invisible {
    display: inline-block;    
    height: 100%;         // so that it has the same height of the parent element (btn)
    width: 100%;
    padding: 2rem 0rem;
    position: absolute;   // to put this text outside of our button
      top: -100%;         // initial state invisible: move it up exactly the size of the element
      left: 0;
    transition: all .2s;
  }

  &:hover {
    background-image: linear-gradient(to left, var(--color-primary-light), var(--color-primary-dark));
    animation: pulsate 1s infinite;
  }

  &:hover &__visible {
    transform: translateY(100%); // translateY to hide the visible text (100% of its height)
  }

  &:hover &__invisible {
      top: 0;        // the position to make visible the invisible text
  } 

  &:focus {
    outline: none;
    animation: pulsate 1s infinite;
  }
}